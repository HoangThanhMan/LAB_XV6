diff --git a/Makefile b/Makefile
index 74e454f..95710a0 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..ac3b011 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct sysinfo;
 
 // bio.c
 void            binit(void);
@@ -63,6 +64,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          get_free_memory();
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +108,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          get_processes_num ();
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 5247b91..ce7d339 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,6 +23,20 @@ struct {
   struct run *freelist;
 } kmem;
 
+uint64
+get_free_memory(){
+  struct run *r;
+  uint64 cnt_pages = 0;
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while(r){
+    cnt_pages++;
+    r = r->next;
+  }
+  release(&kmem.lock);
+  return cnt_pages*PGSIZE;
+}
+
 void
 kinit()
 {
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..cf59d05 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -296,6 +296,9 @@ fork(void)
   }
   np->sz = p->sz;
 
+  // copy trace mask value
+  np->mask = p->mask;
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -693,3 +696,13 @@ procdump(void)
     printf("\n");
   }
 }
+
+uint64
+get_processes_num (){
+  struct proc *p;
+  uint64 num_proc = 0;
+  for (p = proc; p < &proc[NPROC]; p++){
+    if(p->state != UNUSED) num_proc++;
+  }
+  return num_proc;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..57ea3ab 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -83,6 +83,8 @@ enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
 struct proc {
+  // trace mask value
+  uint64 mask;
   struct spinlock lock;
 
   // p->lock must be held when using these:
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..bc5ed95 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,35 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+// the system call name index array
+static char* syscalls_name[] = {
+[SYS_fork]    "syscall fork",
+[SYS_exit]    "syscall exit",
+[SYS_wait]    "syscall wait",
+[SYS_pipe]    "syscall pipe",
+[SYS_read]    "syscall read",
+[SYS_kill]    "syscall kill",
+[SYS_exec]    "syscall exec",
+[SYS_fstat]   "syscall fstat",
+[SYS_chdir]   "syscall chdir",
+[SYS_dup]     "syscall dup",
+[SYS_getpid]  "syscall getpid",
+[SYS_sbrk]    "syscall sbrk",
+[SYS_sleep]   "syscall sleep",
+[SYS_uptime]  "syscall uptime",
+[SYS_open]    "syscall open",
+[SYS_write]   "syscall write",
+[SYS_mknod]   "syscall mknod",
+[SYS_unlink]  "syscall unlink",
+[SYS_link]    "syscall link",
+[SYS_mkdir]   "syscall mkdir",
+[SYS_close]   "syscall close",
+[SYS_trace]   "syscall trace",
+[SYS_sysinfo] "syscall sysinfo",
 };
 
 void
@@ -138,7 +169,12 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    // p->trapframe->a0 = syscalls[num]();
+    uint64 a0 = syscalls[num]();
+    if ((p->mask >> num) & 0b1) {
+      printf("%d: %s -> %lu\n", p->pid, syscalls_name[num], a0);
+    }
+    p->trapframe->a0 = a0;
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b106a10 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace 22
+#define SYS_sysinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..4983570 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,32 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int mask;
+  argint(0, &mask);
+  struct proc *p = myproc();
+  p->mask = mask;
+  return 0;
+}
+
+uint64
+sys_sysinfo(void) {
+  uint64 param;
+  struct sysinfo info;
+  argaddr(0, &param);
+  if ( param < 0){
+    return -1;
+  }
+
+  info.freemem = get_free_memory();
+  info.nproc = get_processes_num();
+
+  struct proc *p = myproc();
+
+  if (copyout(p->pagetable, param, (char *)&info, sizeof(info)) < 0)
+    return -1;
+  return 0;
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..7542da7 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct sysinfo;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(struct sysinfo *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
